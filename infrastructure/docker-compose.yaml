services:
  config-server:
    container_name: config-server
    build:
      context: ../
      dockerfile: infrastructure/docker/config-server/Dockerfile
    ports:
      - "${CONFIG_SERVER_PORT:-8888}:8888"
    env_file: ../.env
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVER_PORT=${CONFIG_SERVER_PORT}
      - CONFIG_SERVER_SEARCH_LOCATIONS=${CONFIG_SERVER_SEARCH_LOCATIONS}
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS=${CONFIG_SERVER_SEARCH_LOCATIONS}
    volumes:
      - ../infrastructure/config/cloud:/config-repo
    networks:
      - app-network
#
#  api-gateway:
#    container_name: api-gateway
#    build:
#      context: ../
#      dockerfile: infrastructure/docker/api-gateway/Dockerfile
#    env_file: ../.env
#    environment:
#      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
#      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
#    ports:
#      - "${API_GATEWAY_PORT:-8080}:8080"
#    depends_on:
#      - config-server
#    networks:
#      - app-network


  postgres:
    container_name: postgres
    image: postgres:16
#    env_file: ../.env
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
#    healthcheck:
    volumes:
      - ./db/postgres/init/01_init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./pgdata:/var/lib/postgresql/data

    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network

  user-service:
    container_name: user-service
    build:
      context: ../
      dockerfile: infrastructure/docker/user-service/Dockerfile
    env_file: ../.env
#    environment:
#      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
#      - CONFIG_SERVER_URL=${CONFIG_SERVER_URL}
    ports:
      - "${USER_SERVICE_PORT:-8081}:8080"
    depends_on:
      - config-server
      - postgres
      - grafana
      - loki
    networks:
      - app-network


  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - "3000:3000"
    depends_on:
      - prometheus


networks:
  app-network:
    driver: bridge


